/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type { PromiseOrValue } from "../../common";
import type { TestDapp, TestDappInterface } from "../../contracts/TestDapp";

const _abi = [
  {
    inputs: [],
    name: "doRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_increment",
        type: "uint256",
      },
    ],
    name: "increaseNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_number",
        type: "uint256",
      },
    ],
    name: "setNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userNumbers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x000200000000000200010000000103550000006001100270000000590010019d000000010120018f000000000110004c000000080000c13d015f00180000040f015f00090000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000160000c13d000000200100003900000100020000390000000000120439000001200100003900000000000104390000005a01000041000001600001042e00000000010000190000016100010430000900000000000200000000050004110000000001000410000080020210008c000000350000613d000080010250008c000000350000613d000100000005001d0000005b020000410000000000200439000000040200003900000000001204390000005c0100004100008002020000390000000003000415000000090330008a00000020033000c9015f01420000040f000000ff01000039000000080110024f000000000110004c000000560000613d000000090100035f000000000101043b000000000110004c0000000105000029000000350000c13d0000000001000019000001600001042e0000008001000039000000400600003900000000001604350000000001000031000000030210008c0000005f0000a13d0000000102000367000000000302043b000000e0033002700000005d0430009c000000580000213d000000600230009c000000610000613d000000610230009c0000005f0000c13d0000000002000416000000000220004c000000850000c13d000000040110008a00000062020000410000001f0310008c000000000300001900000000030220190000006201100197000000000410004c0000000002008019000000620110009c00000000010300190000000001026019000000000110004c0000008b0000c13d00000000010000190000016100010430000000000100001900000161000104300000005e0430009c000000730000613d0000005f0130009c0000005f0000c13d000000000100041600000000010000190000016100010430000000000100001900000161000104300000000002000416000000000220004c000000870000c13d000000040110008a00000062020000410000001f0310008c000000000300001900000000030220190000006201100197000000000410004c0000000002008019000000620110009c00000000010300190000000001026019000000000110004c000000a40000c13d000000000100001900000161000104300000000003000416000000000330004c000000890000c13d000000040110008a00000062030000410000001f0410008c000000000400001900000000040320190000006201100197000000000510004c0000000003008019000000620110009c00000000010400190000000001036019000000000110004c000000c60000c13d00000000010000190000016100010430000000000100001900000161000104300000000001000019000001610001043000000000010000190000016100010430000100000006001d000000000050043500000020010000390000000000010435000000640100004100008010020000390000000003000415000000050330008a00000020033000c9015f01420000040f000000050100035f000000ff02000039000000040220024f000000010220008c000000cc0000c13d000000000201043b00000001010003670000000401100370000000000101043b015f015b0000040f0000000101000029000000000101043300000040011002100000006701100197000001600001042e000000000050043500000020010000390000000000010435000000640100004100008010020000390000000003000415000000070330008a00000020033000c9015f01420000040f000000070100035f000000ff02000039000000060220024f000000010220008c000000ea0000c13d000000000101043b000100000001001d015f015d0000040f00000001020003670000000402200370000000000202043b0000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c000001200000613d0000006a0100004100000000001004350000001101000039000000040200003900000000001204350000006b0100004100000161000104300000000401200370000000000101043b000000630210009c000001080000413d0000000001000019000001610001043000000060021002700000001f0220018f00000065031002700000006503300197000000000430004c000000da0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000000d30000413d000000000420004c000000e80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f00000000002304350000006601100197000001610001043000000060021002700000001f0220018f00000065031002700000006503300197000000000430004c000000f80000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000000f10000413d000000000420004c000001060000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500000066011001970000016100010430000100000006001d000000000010043500000020010000390000000000010435000000640100004100008010020000390000000003000415000000030330008a00000020033000c9015f01420000040f000000030100035f000000ff02000039000000020220024f000000010220008c000001240000c13d000000000101043b015f015d0000040f0000000102000029000000000202043300000000001204350000004001200210000000670110019700000068011001c7000001600001042e0000000102000029015f015b0000040f0000006901000041000001600001042e00000060021002700000001f0220018f00000065031002700000006503300197000000000430004c000001320000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000012b0000413d000000000420004c000001400000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000000660110019700000161000104300002000000000002000200000003001d0000002003300039000100000003001d00000151002104230000000203000029000000200230011a000000000201035500000062010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000006c010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d0000015f00000432000001600001042e00000161000104300000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff00000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000077df77240000000000000000000000000000000000000000000000000000000077df772500000000000000000000000000000000000000000000000000000000afc874d2000000000000000000000000000000000000000000000000000000001119e8a6000000000000000000000000000000000000000000000000000000003fb5c1cb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000020000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000007ffffffffffffff00000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000008000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";

type TestDappConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestDappConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestDapp__factory extends ContractFactory {
  constructor(...args: TestDappConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestDapp> {
    return super.deploy(overrides || {}) as Promise<TestDapp>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestDapp {
    return super.attach(address) as TestDapp;
  }
  override connect(signer: Signer): TestDapp__factory {
    return super.connect(signer) as TestDapp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDappInterface {
    return new utils.Interface(_abi) as TestDappInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDapp {
    return new Contract(address, _abi, signerOrProvider) as TestDapp;
  }
}

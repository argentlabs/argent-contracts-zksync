/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type { PromiseOrValue } from "../../common";
import type { TestDapp, TestDappInterface } from "../../contracts/TestDapp";

const _abi = [
  {
    inputs: [],
    name: "doRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_increment",
        type: "uint256",
      },
    ],
    name: "increaseNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_number",
        type: "uint256",
      },
    ],
    name: "setNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userNumbers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x000200000000000200010000000103550000006001100270000000420010019d0000000101200190000000070000c13d0102005b0000040f0102004a0000040f0000006002200210000000430220019700000040011002100000004401100197000000000121019f00000045011001c70000801002000039010200f90000040f0000000102200190000000140000613d000000000101043b000000000001042d000000000201001900000060022002700000001f0320018f00000046022001970000000504200270000000000540004c000000230000613d00000000050000190000000506500210000000000761034f000000000707043b00000000007604350000000105500039000000000645004b0000001c0000413d000000000530004c000000310000613d00000003033002100000000504400210000000000504043300000000053501cf000000000535022f000000000141034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000151019f00000000001404350000000001000019010200440000040f00000047010000410000800202000039010200f90000040f00000001022001900000003a0000613d000000000101043b000000000001042d00000000010000190000000002000019010200440000040f000000400110021000000044011001970000000001310019000000600220021000000043022001970000000001210019000001030001042e0000004001100210000000440110019700000060022002100000004302200197000000000112019f00000104000104300000008001000039000000400200003900000000001204350000000001000416000000000110004c000000580000c13d00000020020000390000010001000039000000000021043900000120020000390000000000020439000000400200003900000048030000410102003d0000040f00000000010000190000000002000019010200440000040f000200000000000200000000070004110000000001000410000080020210008c0000006f0000613d000080010270008c0000006f0000613d0000004902000041000000000020043900000004020000390000000000120439000200000007001d010200330000040f0000000207000029000000000110004c0000006f0000c13d0000000001000019000000000200001900000000030000190102003d0000040f0000008001000039000000400200003900000000001204350000000001000031000000040310008c000000e10000413d0000000106000367000000000306043b000000e0033002700000004a0430009c000000820000613d0000004b0430009c000000aa0000613d0000004c0430009c000000cd0000613d0000004d0130009c000000e10000c13d0000000001000416000000e10000013d0000000002000416000000000220004c000000e10000c13d000000040110008a0000004e02000041000000200310008c000000000300001900000000030240190000004e01100197000000000410004c000000000200a0190000004e0110009c00000000010300190000000001026019000000000110004c000000e10000c13d00000000007004350000002001000039000000000001043500000040020000390000000001000019010200080000040f000200000001001d010201000000040f00000004020000390000000103200367000000000303043b0000000001130019000000000331004b000000000300001900000001030040390000000103300190000000e40000613d000000500100004100000000001004350000001101000039000000000012043500000024020000390000000001000019010200440000040f0000000003000416000000000330004c000000e10000c13d000000040110008a0000004e05000041000000200310008c000000000300001900000000030540190000004e01100197000000000410004c000000000400001900000000040520190000004e0110009c00000000010300190000000001046019000000000110004c000000e10000c13d0000000000700435000000200100003900000000000104350000000001000019000200000002001d010200080000040f00000004020000390000000102200367000000000202043b000000000301001900000000010200190000000002030019010200fe0000040f00000002010000290000000001010433000000000200001900000000030000190102003d0000040f0000000003000416000000000330004c000000e10000c13d000000040110008a0000004e03000041000000200410008c000000000400001900000000040340190000004e01100197000000000510004c000000000300a0190000004e0110009c00000000010400190000000001036019000000000110004c000000e10000c13d0000000401600370000000000101043b0000004f0310009c000000ea0000a13d00000000010000190000000002000019010200440000040f0000000202000029010200fe0000040f0000008001000039000000000200001900000000030000190102003d0000040f00000000001004350000002001000039000100000001001d00000000000104350000000001000019000200000002001d010200080000040f010201000000040f0000000202000029000000000202043300000000001204350000000001020019000000010200002900000000030000190102003d0000040f000000fc002104230000000102000039000000000001042d0000000002000019000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d0000010200000432000001030001042e000001040001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff020002000000000000000000000000000000002400000000000000000000000000000002000000000000000000000000000000000000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83000000000000000000000000000000000000000000000000000000001119e8a6000000000000000000000000000000000000000000000000000000003fb5c1cb0000000000000000000000000000000000000000000000000000000077df772500000000000000000000000000000000000000000000000000000000afc874d28000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff4e487b7100000000000000000000000000000000000000000000000000000000";

type TestDappConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestDappConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestDapp__factory extends ContractFactory {
  constructor(...args: TestDappConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestDapp> {
    return super.deploy(overrides || {}) as Promise<TestDapp>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestDapp {
    return super.attach(address) as TestDapp;
  }
  override connect(signer: Signer): TestDapp__factory {
    return super.connect(signer) as TestDapp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDappInterface {
    return new utils.Interface(_abi) as TestDappInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDapp {
    return new Contract(address, _abi, signerOrProvider) as TestDapp;
  }
}

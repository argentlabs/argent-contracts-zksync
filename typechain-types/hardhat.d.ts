/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IContractDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractDeployer__factory>;
    getContractFactory(
      name: "IL2Messenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2Messenger__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAccountCodeStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccountCodeStorage__factory>;
    getContractFactory(
      name: "IContractDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractDeployer__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IEthToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthToken__factory>;
    getContractFactory(
      name: "IImmutableSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImmutableSimulator__factory>;
    getContractFactory(
      name: "IKnownCodesStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKnownCodesStorage__factory>;
    getContractFactory(
      name: "IL1Messenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1Messenger__factory>;
    getContractFactory(
      name: "INonceHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceHolder__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IPaymasterFlow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymasterFlow__factory>;
    getContractFactory(
      name: "ISystemContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISystemContext__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountFactory__factory>;
    getContractFactory(
      name: "ArgentAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArgentAccount__factory>;
    getContractFactory(
      name: "ArgentAccountDetector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArgentAccountDetector__factory>;
    getContractFactory(
      name: "ArgentAccountPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArgentAccountPaymaster__factory>;
    getContractFactory(
      name: "DappWhitelistPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DappWhitelistPaymaster__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "SponsorPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SponsorPaymaster__factory>;
    getContractFactory(
      name: "TestDapp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDapp__factory>;
    getContractFactory(
      name: "UserWhitelistPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserWhitelistPaymaster__factory>;

    getContractAt(
      name: "IContractDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractDeployer>;
    getContractAt(
      name: "IL2Messenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2Messenger>;
    getContractAt(
      name: "IAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAccountCodeStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccountCodeStorage>;
    getContractAt(
      name: "IContractDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractDeployer>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IEthToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEthToken>;
    getContractAt(
      name: "IImmutableSimulator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IImmutableSimulator>;
    getContractAt(
      name: "IKnownCodesStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKnownCodesStorage>;
    getContractAt(
      name: "IL1Messenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1Messenger>;
    getContractAt(
      name: "INonceHolder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceHolder>;
    getContractAt(
      name: "IPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IPaymasterFlow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymasterFlow>;
    getContractAt(
      name: "ISystemContext",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISystemContext>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountFactory>;
    getContractAt(
      name: "ArgentAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArgentAccount>;
    getContractAt(
      name: "ArgentAccountDetector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArgentAccountDetector>;
    getContractAt(
      name: "ArgentAccountPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArgentAccountPaymaster>;
    getContractAt(
      name: "DappWhitelistPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DappWhitelistPaymaster>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "IProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "SponsorPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SponsorPaymaster>;
    getContractAt(
      name: "TestDapp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDapp>;
    getContractAt(
      name: "UserWhitelistPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserWhitelistPaymaster>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
